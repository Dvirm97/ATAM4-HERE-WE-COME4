LCS = 177546
TKS = 177560
TKB = 177562
TPS = 177564
TPB = 177566
Ascii0 = 60
Dot = 56
Enter1 = 13.
Enter2 = 10.
Minus = 55
Black = 2
White = 1
Empty = 0
SkipC = 16
SkipF = 22
LeapC = 34
LeapF = 44
EdgeR = 16
EdgeL = 0
NEdgeR = 14
NEdgeL = 2
Win = 20
Loss = 177760 ;which is actually -20

.=torg + 60
.word input
.word 200
.word output
.word 200
.= torg + 100
.word clock
.word 300

.=torg + 1000
main: 			mov #main, sp
				tst -(sp)

				clr r1
				clr r2
				mov #100, @#LCS
				mov #101, @#TKS
				
				wait
				br .-2
				
				halt

input:			rti

				

					
				
				
				
					
output:			

				rti

				
exeMove:		mov r2, -(sp)							; | r2 | pc | - |
				mov r4, -(sp)							; | r4 | r2 | pc | - |
				mov r5, -(sp)							; | r5 | r4 | r2 | pc | - |
				mov clockCounter, 10(sp)				; | r5 | r4 | r2 | pc | time |
				mov Player, r2
				dec r2
				asl r2
				asl r2
				tst roleW(r2)
				beq ilegal
				
				; if player is human continue with interrupt function
				tst srcPos
				bmi ilegal
				cmp srcPos, #176
				bgt ilegal
				tst dstPos
				bmi ilegal
				cmp srcPos, #176 
				bgt ilegal
				
				mov srcPos, r4
				add #Board, r4
				cmp (r4), Player
				bne illegal
				
				cmp srcPos, dstPos						;check if the player which doesnt make a move, has no moves
				bne .+32
					tst -(sp)							; | - | r5 | r4 | r2 | pc | time |
					mov #Board, -(sp)					; | #Board | - | r5 | r4 | r2 | pc | time |
					mov Player, -(sp)					; | Player | #Board | - | r5 | r4 | r2 | pc | time |
					jsr pc, cntMoves
					tst (sp)+							; | #Board | Num_moves | r5 | r4 | r2 | pc | time |
					tst (sp)+							; | Num_moves | r5 | r4 | r2 | pc | time |
					tst (sp)+							; | r5 | r4 | r2 | pc | time |
					beq finish
						br illegal
				
				mov dstPos, r4
				add #Board, r4	
				cmp (r4), #Empty
				bne illegal
			
				


				
				mov srcPos, r5							;find placement on the X axis of board
				clr r4									;for later usage
				div #20, r4								;
				
				mov srcPos, r2
				sub dstPos, r2
				
				cmp Player, #Black
				beq BChkLegal

	;}else
	;WChkLegal:		
				tst r2
				bmi illegal
				
				cmp r2, #SkipF
				bgt WChkLeap
					cmp r5, #EdgeR						;check if on right edge
					bne .+12
						cmp r2, #SkipF					;check if move is exactly diagonally left upwards
						bne illegal
							br finish
						
					cmp r5, #EdgeL						;check if on the left edge
					bne .+12
						cmp r2, #SkipC					;check if move is exactly diagonally right upwards
						bne illegal
							br finish
					cmp r2, #SkipC
					beq finish
						cmp r2, #SkipF
						beq finish
							br illegal
					
	ilegal:		br illegal

					
	WChkLeap:	cmp r5, #NEdgeL
				bgt .+12
					cmp r2, #LeapC
					bne illegal
						br finishL
				
				cmp r5, #NEdgeR
				blt	.+12
					cmp r2, #LeapF
					bne illegal
						br finishL
				
				cmp r2, #LeapC
				beq finishL
					cmp r2, #LeapF
					beq finishL
						br illegal
						
	BChkLegal:	tst r2
				bpl illegal
				
				neg r2
				cmp r2, #SkipF
				bgt BChkLeap
					cmp r5, #EdgeR						;check if on right edge
					bne .+12
						cmp r2, #SkipC					;check if move is exactly diagonally left downward
						bne illegal
							br finish
						
					cmp r5, #EdgeL						;check if on the left edge
					bne .+12
						cmp r2, #SkipF					;check if move is exactly diagonally right downward
						bne illegal
							br finish
					cmp r2, #SkipC
					beq finish
						cmp r2, #SkipF
						beq finish
							br illegal
						


	finishL:	mov dstPos, r5
				add srcPos, r5
				asr r5
				add #Board, r5
				mov #Empty, (r5)
				br finish
				
	illegal:		
				mov Player, r2
				neg r2
				add #3, r2
				mov r2, Player
				mov #0, 10(sp)							; | r5 | r4 | r2 | pc | 0 |
				mov (sp)+, r5							; | r4 | r2 | pc | 0 |	
				mov (sp)+, r4							; | r2 | pc | 0 |	
				mov (sp)+, r2							; | pc | 0 |

				rti
				
						
						
	finish:		mov #Board, -(sp)						; | #Board | r5 | r4 | r2 | pc | time |
				mov srcPos, .+20
				mov dstPos, .+14
				jsr r5, movPiece
				.blkw 2
				mov #STstopB2, (sp)					; | String | r5 | r4 | r2 | pc | time |
				cmp Player, #Black
				beq .+6
					mov #STstopW2, (sp)
				jsr pc, print
				mov #STmove1, (sp)
				jsr pc, print
				mov 12(sp), r1
				jsr pc, printTime
				mov #STmove2, (sp)
				jsr pc, print
				mov #Enter1, (sp)
				jsr pc, printChr
				mov #Enter2, (sp)
				jsr pc, printChr
				mov Player, r2
				neg r2
				add #3, r2
				mov r2, Player
				tst (sp)+								; | r5 | r4 | r2 | pc | time |
				mov #1, 10(sp)							; | r5 | r4 | r2 | pc | 1 |
				mov (sp)+, r5							; | r4 | r2 | pc | 1 |	
				mov (sp)+, r4							; | r2 | pc | 1 |	
				mov (sp)+, r2							; | pc | 1 |

				rti

							
	BChkLeap:	cmp r5, #NEdgeL
				bgt .+12
					cmp r2, #LeapF
					bne illegal
						br finishL
				
				cmp r5, #NEdgeR
				blt	.+12
					cmp r2, #LeapC
					bne illegal
						br finishL
				
				cmp r2, #LeapC
				beq finishL
					cmp r2, #LeapF
					beq finishL
						br illegal
						

printTime:		mov r0, -(sp)							; | r0 | pc |
				mov r2, -(sp)							; | r2 | r0 | pc |
				mov #1, r2								; used to count digits of time passed, set to 1 to prevent endless sob loop
				clr r0
				div rate, r0
				mov r1, -(sp)							; | reminder of rate | r2 | r0 | pc |
				
				cmp r0, #10.							;see if time is less than 10 seconds, otherwise seperate it to it's different 10's components
				blo .+24
					inc r2								;counts the digits so unpacking them from stack would be easier
					mov r0, r1
					clr r0
					div #10., r0
					add #Ascii0, r1
					mov r1, -(sp)						; | | | | | | | <- Digits of time in ascii | remainder | r2 | r0 | pc |
					br .-26								;continue with breaking the number to its digits
					
				add #Ascii0, r0
				mov r0, -(sp)							; | first digit of time | | | | | remainder | r2 | r0 | pc |

														; < -
				jsr	pc, printChr						; - >
				tst (sp)+
				sob r2, .-6								; < -
				
				mov #Dot, -(sp)							; | "." | remainder | r2 | r0 | pc |
				jsr pc, printChr
				tst (sp)+								; | remainder | r2 | r0 | pc |
				mov (sp), r1
				mul #10., r1
				clr r0
				div rate, r0
				add #Ascii0, r0
				mov r0, (sp)							; | the tenth of time | r2 | r0 | pc |
				jsr pc, printChr
				tst (sp)+								; | r2 | r0 | pc |
				mov (sp)+, r2							; | r0 | pc |
				mov (sp)+, r0							; | pc |
				rts pc
				
					
				
exeTime:		mov r1, -(sp)							; | r1 | pc |
				mov #STtime1, -(sp)						; | string | r1 | pc |
				jsr pc, print								
				cmp #1,  timeUp
				beq noTime
				
					mov currPTime, r1
					sub clockCounter, r1
					jsr pc, printTime
					
					
	string2:		mov #STtime2, (sp)						; | string | r1 | pc |
					jsr pc, print
					mov #Enter1, (sp)
					jsr pc, printChr
					mov #Enter2, (sp)
					jsr pc, printChr
					wait
					tst (sp)+								; | r1 | pc |
					mov (sp)+, r1							; | pc |
					
					rts	pc		

					
	noTime:		mov #STtime3, (sp)
				mov #3, -(sp)
				jsr pc, print
				tst (sp)+
				br string2
				
				
				
exeStop:		mov r0, -(sp)							; | r0 | pc |... 
				mov r1, -(sp)							; | r1 | r0 | pc |...
				mov r4, -(sp)							; | r4 | r1 | r0 | pc |...
				mov #Enter1, -(sp)						; | char | r4 | r1 | r0 | pc |
				jsr pc, printChr
				mov #Enter2, (sp)						; | char | r4 | r1 | r0 | pc |
				jsr pc, printChr
				mov #STstop1, (sp)						; | text address | r4 | r1 | r0 | pc |
				jsr pc, print
				
				cmp #White, Player
				beq .+14
					mov #STstopB1, (sp)
					jsr pc, print
					br .+12
				mov #STstopW1, (sp)
				jsr pc, print
				
				mov #STstop2, (sp)
				jsr pc, print
				mov #Board, (sp)						; | #Board | r4 | r1 | r0 | pc |
				mov Player, -(sp)						; | Player | #Board | r4 | r1 | r0 | pc |
				jsr pc, calcWP
				tst (sp)+	 							; | #Board | r4 | r1 | r0 | pc |
				tst (sp)+								; | r4 | r1 | r0 | pc |
				mov r4, r1								; r4 holds the result from calcWP
				mov r4, -(sp)							; | WP | r4 | r1 | r0 | pc |
				mov #1, r4								; r4 now holds how many digits are in the WP result
				
				tst r1									
				bpl .+16
					mov #Minus, -(sp)
					jsr pc, printChr
					tst (sp)+
					neg r1
				
				cmp r1, #10
				blt .+26
					tst r1
					sxt r0
					div #10, r0
					inc r4
					add #Ascii0, r1
					mov r1, -(sp)						; | | | | | | <- WP digits | WP | r4 | r1 | r0 | pc |
					mov r0, r1
					br .-30
				add #Ascii0, r1
				mov r1, -(sp)							; | last digit | | | | | | <- WP digits | WP | r4 | r1 | r0 | pc |
				jsr pc, printChr
				tst(sp)+
				sob r4, .-6
				
				; | WP | r4 | r1 | r0 | pc |
				
				mov #Enter1, -(sp)
				jsr pc, printChr
				mov #Enter2, (sp)
				jsr pc, printChr			
				mov #Enter1, (sp)
				jsr pc, printChr
				mov #Enter2, (sp)
				jsr pc, printChr
				mov Player, r0
				tst (sp)+
				tst (sp)								;check if WP is positive
				beq printTie
				bpl .+10
					neg r0
					add #3, r0
				cmp r0, #Black
				beq .+14
					mov #STstopW2, (sp)
					jsr pc, print
					br .+12
				mov #STstopB2, (sp)
				jsr pc, print
				
				mov #STstop3, (sp)
				jsr pc, print
				
				tst (sp)+								; | r4 | r1 | r0 | pc |
				mov (sp)+, r4							; | r1 | r0 | pc |
				mov (sp)+, r1							; | r0 | pc |
				mov (sp)+, r0							; | pc |
				mov #0, gameStat
				
				rts pc
				
	printTie:	mov #STtie, (sp)
				jsr pc, print
				
				tst (sp)+								; | r4 | r1 | r0 | pc |
				mov (sp)+, r4							; | r1 | r0 | pc |
				mov (sp)+, r1							; | r0 | pc |
				mov (sp)+, r0							; | pc |
				
				rts pc
				
				
				
print:	;Receives in stack (top to bottom):			
										;<text> | ...
										;pc | <text> | ...
			mov r0, -(sp)				;r0 | pc | <text> | ...
			mov 4(sp), r0				;r0 now holds the adress to the text
		;wait until printer is free:
	p_next1:		
			cmpb (r0), #0
			beq p_next2
		;wait for printer:
			tstb @#TPS								
			bpl .-4
		;then:
			movb (r0)+, @#TPB
			br p_next1
	p_next2:		
			mov (sp)+, r0				; pc | <text> | ...
			rts pc

printChr:;Receives in stack (top to bottom):			
										; char | ....
										;pc | char | ...
		;wait until printer is free:
			tstb @#TPS								
			bpl .-4
		;then:
			movb 2(sp), @#TPB
			rts pc			
			
				
clock:			inc clockCounter
				cmp currPTime, clockCounter
				ble .+4
					rti
				mov #1, timeUp
				rti
				

				
calcWP:	
		;passes parameters for next function through the stack
		;								#Board, in stack
		;								Player, in stack
		;								returns WP in check
			
			tst -(sp)					;| board address | player | link reg | - |
			mov 6(sp), -(sp)			;| board address | player | link reg | - | board address |
			mov 6(sp), -(sp)			;| board address | player | link reg | - | board address | player |
			jsr pc, cntPlay				;| board address | player | link reg | number of pieces for player | board address | player |
			
			mov (sp), r4				;we want to check now how many playpieces the other player has
			neg r4
			add #3, r4
			mov r4, (sp)				;| board address | player | link reg | number of pieces for player | board address | *Adversary* |
			mov 4(sp), r4				
			jsr pc, cntPlay
			sub 4(sp), r4				;now r4 holds the WP
			add #6, sp					;| board address | player | link reg |
			rts pc
			
;~~~~

	;counts play pieces for current player
	;									
	
cntPlay:
					; | STACK:    -    , #Board, Player, pc 
					;input:		empty space for output				- in stack
					;			board address						- in stack
					;			player for which win is checked		- in stack
					;output:	number of play pieces for player	- in stack in empty space
			
			mov r0, -(sp)				;preserve r0, now used to hold the player's num
			mov 4(sp), r0
			mov r1, -(sp)				;preserve r1, now used to hold the address of board's tiles
			mov 10(sp), r1	
			mov r1, BoardS
			mov r2, -(sp)
			clr r2						;preserve r2, now used to count playpieces
			
			add #200, r1
			
			
	loop1:
			dec r1
			dec r1
			cmp r1, BoardS
			blt exit2
			
				cmp (r1), r0
				bne loop1
			
					inc r2
					br loop1
	exit2:		
	
			mov r2, 14(sp)
			mov (sp)+, r2
			mov (sp)+, r1
			mov (sp)+, r0
			rts pc

	BoardS:	.blkw 1						;gonna hold the addresses of the end of the game board and beginning

	
	;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		


movPiece:
										;| STACK: #Board, reg link (r5)
										;input:	SourcePosition - inline (r5++)
										;		DestinPosition - inline (r5+2)
										
			mov r0, -(sp)				;| #Board | reg link | r0 |
			mov 4(sp), r0				;asign Board address to r0 
			mov r1, -(sp)				;| #Board | reg link | r0 | r1 |
			mov (r5)+, r1				;assign SrcPos to r1
			mov r2, -(sp)				;| #Board | reg link | r0 | r1 | r2 |
			mov r3, -(sp)				;| #Board | reg link | r0 | r1 | r2 | r3 |
			mov (r5)+, r2				;assign DstPos to r2
			add r0, r1					;add boardPos to SrcPos in order to get the actual adress
			add r0, r2					;add boardPos to DstPos in order to get the actual adress 
			
			mov (r1), r3				;save player in SrcPos
			mov #0, (r1)				;assign 0 to SrcPos
			mov r3, (r2)				;assign player in SrcPos to DstPos
			mov (sp)+, r3				;| #Board | reg link | r0 | r1 | r2 |
			mov (sp)+, r2				;| #Board | reg link | r0 | r1 |
			mov (sp)+, r1				;| #Board | reg link | r0 |
			mov (sp)+, r0				;| #Board | reg link |
			
			rts r5		

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



cntMoves:	
				;| STACK:   -   , #Board, Player, pc
				;input: empty space for output  	- in stack
				;		Player						- in stack
				;		board address				- in stack
				;output: number of possible moves 	- in empty space in stack
			mov r0, -(sp)							;preserving r0, now used as an index for game tiles
			mov 6(sp), r0
			mov r0, BoardB
			mov r0, BoardE
			mov r0, BordLRo
			add #176, BoardE
			add #160, BordLRo
			mov r1, -(sp)							;preserving r1, now used to count the possible moves
			clr r1
			mov r2, -(sp)							;preserving r2, now used for calculations
			mov r3, -(sp)							;preserving r3, now used for calculations
			mov r4, -(sp)							;preserving r4, now used to hold player's turn
			mov 14(sp) , r4
			
			add #156, r0							;starts to go throught indexes from the end to beginning
			cmp #Black, r4			
			beq loopB
			
				sub #136, r0						;starts at the second last row, because there is no use checking for the last row
				br loopW							;checks whose turn it is
			
		;a loop for counting possible moves in case player is Black
			
	loopB:
			cmp (r0), #Black
			bne nextB								;if not Black, proceed to nextB tile
			
	;Black left border check:			

				mov r0, r3							;for r2r3 we check if r3(mod 20) == 0, which means we're at the left border
				sxt r2					
				div #20, r2
				cmp r3, #EdgeL						;if on left border - 
				beq tileRB							; - proceed to check right move tile (skip the right border check)			
			
	;B left occupation check:
		
			mov r0, r3
			add #SkipC, r3
			cmp (r3), #White
			bgt borderRB 							;if left move tile has Black, proceed to check right border
			beq leapLB								;if left move tile has White, proceed to check left leap
					
				inc r1								;else increase numOfSteps by 1
				br borderRB							;proceed to check the right border 

		;checks if player can leap (eat) the playpiece on its left
			
	leapLB:	
			cmp r3, BordLRo							;if White is at last row -
			bge borderRB							; - proceed to check right border
			
				tst r3
				sxt r2	
				div #20, r2
				cmp r3, #EdgeL						;if White is at left border - 
				beq borderRB						; - proceed to check right border
				
					mov r0, r3					
					add #SkipC, r3
					add #SkipC, r3	
					cmp (r3), #Empty				;if left leap tile is occupied - 
					bne borderRB					; - proceed to check right border
					
						inc r1						;else increase numOfSteps by 1
						br borderRB					;proceed to check the right border
					
		;Black right border check:
		
	borderRB:	
			mov r0, r3
			sxt r2
			div #20, r2
			cmp r3, #EdgeR							;if on right border - 
			beq nextB								;proceed to nextB tile
			
		;the label signifies a situation where we want to check if Black player can proceed to the right diagonal, when we know he is not on the right border
			
	tileRB:
			mov r0, r3
			add #SkipF, r3
			cmp (r3), #White			
			bgt nextB								;if right move tile has Black, proceed to nextB tile
			
				beq leapRB							;if right move tile has White, proceed to check right leap 
				
					inc r1							;else increase numOfSteps by 1
					br nextB						; proceed to nextB tile
			
		;checks if player can leap (eat) the playpiece on its right
			
	leapRB:	
			cmp r3, BordLRo							;if White is at last row - 			
			bge nextB								; - proceed to nextB tile
			
				tst r3
				sxt r2
				div #20, r2
				cmp r3, #EdgeR						;if White is at right border - 
				beq nextB							;proceed to nextB tile
				
					mov r0, r3
					add #SkipF, r3					
					add #SkipF, r3					
					cmp (r3), #Empty				;if right leap tile is occupied - 
					bne nextB						; - proceed to nextB tile
					
						inc r1						;else increase numOfSteps by 1
						br nextB

		;checks next tile for moves.
						
	nextB:
			sub #2, r0								;going from end to start, each tile a word (so *2* bytes)
			cmp r0, BoardB
			bge loopB
				
		;unfold routine and Empty the stack
		
				mov r1, 20(sp)
				mov (sp)+, r4
				mov (sp)+, r3
				mov (sp)+, r2
				mov (sp)+, r1
				mov (sp)+, r0		
				rts pc

		;a loop for counting possible moves in case player is White			
			
	loopW:		
			cmp (r0), r4					;checks wether current tile has a White playpiece
			bne nextW						;if not checks next tile
			
				mov r0, r3						;
				sxt r2							;
				div #20, r2						;finds the reminders of the index, each even reminder between 0 - 20 (excluding) indicates a different horizontal location
			
				cmp r3, #EdgeL
				beq tileRW					;if it's right by the left ledge, move is illegal, there's no need to check if next to right ledge, since it is 
											;obviously by the left ledge.
			
			mov r0, r3					
			sub #SkipF, r3				
			
			cmp (r3), #White				;if space has a White playpiece, it cannot jump there
			beq borderRW
				cmp (r3), #Black			;if space has a Black playpiece try and initiate eat
				beq leapLW					
					inc r1					;otherwise space is Empty so a move is possible
					br borderRW
	
		;checks if player can leap (eat) the playpiece on its left
	
	leapLW:
			tst r3
			sxt r2						
			div #20, r2						;finds the reminders of the index, to determine if close to the left
			
			cmp r3, #EdgeL
			beq borderRW					;if it's right by the left ledge, move is illegal

				mov r0,r3					;otherwise, check if close to ledge has destroyed r2, we have to recreate the checked index and find now the third 
				sub #SkipF, r3				;diagonal tile away from checked tile
				sub #SkipF, r3				;
				cmp r3, BoardB
				blt borderRW				;if index is negative that must mean eating would get the piece out of bounds.
				
					cmp (r3), #Empty		;if space is Empty count as eat
					bne borderRW
					inc r1					;eating is possible. now to check a move to the right
					br borderRW
			
		;checks if playpiece is on the right border (check if can jump to the right)
		
	borderRW:
			mov r0, r3						;
			sxt r2							;
			div #20, r2						;finds the reminders of the index, each even reminder between 0 - 20 (excluding) indicates a different horizontal location
						
			cmp r3, #EdgeR
			beq nextW						;if it's right by the right ledge, move is illegal, check the next tile
			
		;the label signifies a situation where we want to check if Black player can proceed to the right diagonal, when we know he is not on the right border
			
			
	tileRW:
			mov r0, r3						;
			sub #SkipC, r3					;
			cmp (r3), #White				;if space has a White playpiece, it cannot jump there
			beq nextW
				cmp (r3), #Black			;if space has a Black playpiece try and initiate eat
				beq leapRW
				inc r1						;otherwise space is Empty so a move is possible
				br nextW
		
		;checks if player can leap (eat) the playpiece on its left
	
	leapRW:	
			tst r3
			sxt r2						
			div #20, r2						;finds the reminders of the index, to determine if close to the right
			
			cmp r3, #EdgeR
			beq nextW						;if it's right by the right ledge, move is illegal
			
				mov r0,r3					;otherwise, check if close to ledge has destroyed r2, we have to recreate the checked index and find now the third 
				sub #SkipC, r3				;diagonal tile away from checked tile
				sub #SkipC, r3				;
				cmp r3, BoardB				;
				blt nextW					;if index is negative, that must mean eating would get the piece out of bounds.
			
				cmp (r3), #Empty			;if space is Empty count as eat
				bne nextW
					inc r1					;eating is possible. now to check the nextW tile
					br nextW				;checkes nextW tile

		;check next tile index
			
	nextW:	
			add #2, r0						;check nextW tile
			cmp r0, BoardE					;if index is 176 board has been scanned top to bottom -> halt
			ble loopW

		;unfold routine and Empty the stack
		
				mov r1, 20(sp)
				mov (sp)+, r4
				mov (sp)+, r3
				mov (sp)+, r2
				mov (sp)+, r1
				mov (sp)+, r0			
				rts pc
		
BoardB:		.blkw 1						;gonna hold the addresses of the end of the game board and beginning
BoardE:		.blkw 1						;
BordLRo:	.blkw 1						;address of the first tile in the last row of the board			
			
			
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
				
				
Board:			.word	2, 2, 1, 2, 2, 2, 2, 2
				.word	2, 2, 2, 2, 2, 2, 2, 2
				.word	2, 1, 2, 2, 2, 2, 2, 2
				.word	2, 2, 2, 2, 2, 2, 2, 2
				.word	2, 2, 2, 2, 2, 2, 2, 2
				.word	2, 2, 2, 2, 2, 2, 2, 2
				.word	2, 2, 2, 2, 2, 2, 2, 2
				.word	2, 2, 2, 2, 2, 2, 2, 2				
				
rate:			.word 1000
clockCounter:	.word 0
.even

currPTime:		.word 5000
.even
timeUp:			.word 0

STtime1:		.ascii <Time left: \0>
STtime2:		.ascii < seconds\0>
STtime3:		.ascii <0.0\0>
.even
STstop1:		.ascii <WP for \0>
.even
STstop2:		.ascii < player is \0>
STstop3:		.ascii < player wins!\0>
Player:			.word 2
srcPos:			.word 20
dstPos:			.word 20
STstopW1:		.ascii <white\0>
STstopW2:		.ascii <White\0>
STstopB1:		.ascii <black\0>
STstopB2:		.ascii <Black\0>
STtie:			.ascii <It's a tie!\0>
STmove1:		.ascii < Human move took \0 >
STmove2:		.ascii < seconds\0>	
